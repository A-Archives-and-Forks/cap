"use strict"; function _classPrivateFieldLooseBase(e, t) { if (!{}.hasOwnProperty.call(e, t)) throw new TypeError("attempted to use private field on non-instance"); return e } var id = 0; function _classPrivateFieldLooseKey(e) { return "__private_" + id++ + "_" + e } !function () { let e; const t = function (e, t) { return void 0 === t && (t = 1e4), new Promise(((s, a) => { const i = setTimeout((() => { a(new Error("Initialize timeout")) }), t), r = () => { e() ? (clearTimeout(i), s()) : setTimeout(r, 500) }; r() })) }; var s = _classPrivateFieldLooseKey("workerUrl"), a = _classPrivateFieldLooseKey("resetTimer"), i = _classPrivateFieldLooseKey("workersCount"), r = _classPrivateFieldLooseKey("token"), o = _classPrivateFieldLooseKey("shadow"), n = _classPrivateFieldLooseKey("div"), c = _classPrivateFieldLooseKey("host"), l = _classPrivateFieldLooseKey("solving"), d = _classPrivateFieldLooseKey("eventHandlers"); class h extends HTMLElement { static get observedAttributes() { return ["onsolve", "onprogress", "onreset", "onerror", "workers"] } constructor() { super(), Object.defineProperty(this, s, { writable: !0, value: "" }), Object.defineProperty(this, a, { writable: !0, value: null }), Object.defineProperty(this, i, { writable: !0, value: navigator.hardwareConcurrency || 8 }), Object.defineProperty(this, r, { writable: !0, value: null }), Object.defineProperty(this, o, { writable: !0, value: void 0 }), Object.defineProperty(this, n, { writable: !0, value: void 0 }), Object.defineProperty(this, c, { writable: !0, value: void 0 }), Object.defineProperty(this, l, { writable: !0, value: !1 }), Object.defineProperty(this, d, { writable: !0, value: void 0 }), _classPrivateFieldLooseBase(this, d)[d] && _classPrivateFieldLooseBase(this, d)[d].forEach(((e, t) => { this.removeEventListener(t.slice(2), e) })), _classPrivateFieldLooseBase(this, d)[d] = new Map, this.boundHandleProgress = this.handleProgress.bind(this), this.boundHandleSolve = this.handleSolve.bind(this), this.boundHandleError = this.handleError.bind(this), this.boundHandleReset = this.handleReset.bind(this) } async initialize() { _classPrivateFieldLooseBase(this, s)[s] && URL.revokeObjectURL(_classPrivateFieldLooseBase(this, s)[s]); try { await t((() => !!e)), _classPrivateFieldLooseBase(this, s)[s] = URL.createObjectURL(new Blob([e], { type: "application/javascript" })) } catch (e) { throw this.error("Failed to initialize worker"), e } } attributeChangedCallback(e, t, s) { if (e.startsWith("on")) { const t = e.slice(2), a = _classPrivateFieldLooseBase(this, d)[d].get(e); if (a && this.removeEventListener(t, a), s) { const s = t => { const s = this.getAttribute(e); "function" == typeof window[s] && window[s].call(this, t) }; _classPrivateFieldLooseBase(this, d)[d].set(e, s), this.addEventListener(t, s) } } } async connectedCallback() { _classPrivateFieldLooseBase(this, c)[c] = this, _classPrivateFieldLooseBase(this, o)[o] = this.attachShadow({ mode: "open" }), _classPrivateFieldLooseBase(this, n)[n] = document.createElement("div"), this.createUI(), this.addEventListeners(), await this.initialize(), _classPrivateFieldLooseBase(this, n)[n].removeAttribute("disabled"); const e = this.getAttribute("data-cap-worker-count"); this.setWorkersCount(parseInt(e) ? parseInt(e, 10) : navigator.hardwareConcurrency || 8), _classPrivateFieldLooseBase(this, c)[c].innerHTML = '<input type="hidden" name="cap-token">' } async solve() { if (!_classPrivateFieldLooseBase(this, l)[l]) try { _classPrivateFieldLooseBase(this, l)[l] = !0, this.updateUI("verifying", "Verifying...", !0), await t((() => !!_classPrivateFieldLooseBase(this, s)[s])), this.dispatchEvent("progress", { progress: 0 }); try { const e = this.getAttribute("data-cap-api-endpoint"); if (!e) throw new Error("Missing API endpoint"); const { challenge: t, target: s, token: i } = await (await fetch(`${e}challenge`, { method: "POST" })).json(), o = await this.solveChallenges(t), n = await (await fetch(`${e}redeem`, { method: "POST", body: JSON.stringify({ token: i, solutions: o }), headers: { "Content-Type": "application/json" } })).json(); if (!n.success) throw new Error("Invalid solution"); this.dispatchEvent("progress", { progress: 100 }), this.dispatchEvent("solve", { token: n.token }), _classPrivateFieldLooseBase(this, r)[r] = n.token, this.querySelector("input[name='cap-token']") && (this.querySelector("input[name='cap-token']").value = n.token), _classPrivateFieldLooseBase(this, a)[a] && clearTimeout(_classPrivateFieldLooseBase(this, a)[a]); const c = new Date(n.expires).getTime() - Date.now(); return c > 0 && c < 864e5 ? _classPrivateFieldLooseBase(this, a)[a] = setTimeout((() => this.reset()), c) : this.error("Invalid expiration time"), { success: !0, token: _classPrivateFieldLooseBase(this, r)[r] } } catch (e) { throw this.error(e.message), e } } finally { _classPrivateFieldLooseBase(this, l)[l] = !1 } } async solveChallenges(e) { const t = e.length; let a = 0; const r = Array(_classPrivateFieldLooseBase(this, i)[i]).fill(null).map((() => new Worker(_classPrivateFieldLooseBase(this, s)[s]))), o = (e, i) => { let [o, n] = e; return new Promise(((e, c) => { const l = r[i], d = setTimeout((() => { l.terminate(), r[i] = new Worker(_classPrivateFieldLooseBase(this, s)[s]), c(new Error("Worker timeout")) }), 3e4); l.onmessage = s => { let { data: i } = s; i.found && (clearTimeout(d), a++, this.dispatchEvent("progress", { progress: Math.round(a / t * 100) }), e([o, n, i.nonce])) }, l.onerror = e => { clearTimeout(d), this.error(`Error in worker: ${e}`), c(e) }, l.postMessage({ salt: o, target: n }) })) }, n = []; try { for (let t = 0; t < e.length; t += _classPrivateFieldLooseBase(this, i)[i]) { const s = e.slice(t, Math.min(t + _classPrivateFieldLooseBase(this, i)[i], e.length)), a = await Promise.all(s.map(((e, t) => o(e, t)))); n.push(...a) } } finally { r.forEach((e => e.terminate())) } return n } setWorkersCount(e) { const t = parseInt(e, 10), s = Math.min(navigator.hardwareConcurrency || 8, 16); _classPrivateFieldLooseBase(this, i)[i] = !isNaN(t) && t > 0 && t <= s ? t : navigator.hardwareConcurrency || 8 } createUI() { _classPrivateFieldLooseBase(this, n)[n].classList.add("captcha"), _classPrivateFieldLooseBase(this, n)[n].setAttribute("role", "button"), _classPrivateFieldLooseBase(this, n)[n].setAttribute("tabindex", "0"), _classPrivateFieldLooseBase(this, n)[n].setAttribute("disabled", "true"), _classPrivateFieldLooseBase(this, n)[n].innerHTML = '<div class="checkbox"></div><p>I\'m a human</p><a href="https://capjs.js.org/" class="credits" target="_blank" rel="follow noopener"><span>Secured by&nbsp;</span>Cap</a>', _classPrivateFieldLooseBase(this, o)[o].innerHTML = '<style>.captcha{background-color:var(--cap-background);border:1px solid var(--cap-border-color);border-radius:var(--cap-border-radius);width:var(--cap-widget-width);display:flex;align-items:center;padding:var(--cap-widget-padding);gap:var(--cap-gap);cursor:pointer;transition:filter var(--cap-transition-duration),transform var(--cap-transition-duration);position:relative;-webkit-tap-highlight-color:rgba(255,255,255,0);overflow:hidden;color:var(--cap-color)}.captcha:hover{filter:var(--cap-hover-filter)}.captcha:not([disabled]):active{transform:scale(var(--cap-active-scale))}.checkbox{width:var(--cap-checkbox-size);height:var(--cap-checkbox-size);border:var(--cap-checkbox-border);border-radius:var(--cap-checkbox-border-radius);background-color:var(--cap-checkbox-background);transition:opacity var(--cap-transition-duration);margin-top:var(--cap-checkbox-margin);margin-bottom:var(--cap-checkbox-margin)}.captcha *{font-family:var(--cap-font)}.captcha p{margin:0;font-weight:500;font-size:15px;user-select:none;transition:opacity var(--cap-transition-duration)}.captcha[data-state=verifying] .checkbox{background: none;display:flex;align-items:center;justify-content:center;transform: scale(1.1);border: none;border-radius: 50%;background: conic-gradient(var(--cap-spinner-color) 0%, var(--cap-spinner-color) var(--progress, 0%), var(--cap-spinner-background-color) var(--progress, 0%), var(--cap-spinner-background-color) 100%);position: relative;}.captcha[data-state=verifying] .checkbox::after {content: "";background-color: var(--cap-background);width: calc(100% - var(--cap-spinner-thickness));height: calc(100% - var(--cap-spinner-thickness));border-radius: 50%;margin:calc(var(--cap-spinner-thickness) / 2)}.captcha[data-state=done] .checkbox{border:1px solid transparent;background-image:var(--cap-checkmark);background-size:cover}.captcha[data-state=error] .checkbox{border:1px solid transparent;background-image:var(--cap-error-cross);background-size:cover}.captcha[disabled]{\ncursor:not-allowed}.captcha[disabled][data-state=verifying]{cursor:progress}.captcha[disabled][data-state=done]{cursor:default}.captcha .credits{position:absolute;bottom:10px;right:10px;font-size:var(--cap-credits-font-size);color:var(--cap-color);opacity:var(--cap-opacity-hover)}.captcha .credits span{display:none;text-decoration:underline}.captcha .credits:hover span{display:inline-block}</style>', _classPrivateFieldLooseBase(this, o)[o].appendChild(_classPrivateFieldLooseBase(this, n)[n]) } addEventListeners() { _classPrivateFieldLooseBase(this, n)[n].querySelector("a").addEventListener("click", (e => { e.stopPropagation(), e.preventDefault(), window.open("#", "_blank") })), _classPrivateFieldLooseBase(this, n)[n].addEventListener("click", (() => { _classPrivateFieldLooseBase(this, n)[n].hasAttribute("disabled") || this.solve() })), this.addEventListener("progress", this.boundHandleProgress), this.addEventListener("solve", this.boundHandleSolve), this.addEventListener("error", this.boundHandleError), this.addEventListener("reset", this.boundHandleReset) } updateUI(e, t, s) { void 0 === s && (s = !1), _classPrivateFieldLooseBase(this, n)[n].setAttribute("data-state", e), _classPrivateFieldLooseBase(this, n)[n].querySelector("p").innerText = t, s ? _classPrivateFieldLooseBase(this, n)[n].setAttribute("disabled", "true") : _classPrivateFieldLooseBase(this, n)[n].removeAttribute("disabled") } handleProgress(e) { const t = _classPrivateFieldLooseBase(this, n)[n].querySelector("p"); t && (_classPrivateFieldLooseBase(this, n)[n].querySelector(".checkbox").style.setProperty("--progress", `${e.detail.progress}%`), t.innerText = `Verifying... ${e.detail.progress}%`), this.executeAttributeCode("onprogress", e) } handleSolve(e) { this.updateUI("done", "You're a human", !0), this.executeAttributeCode("onsolve", e) } handleError(e) { this.updateUI("error", "Error. Try again."), this.executeAttributeCode("onerror", e) } handleReset(e) { this.updateUI("", "I'm a human"), this.executeAttributeCode("onreset", e) } executeAttributeCode(e, t) { const s = this.getAttribute(e); if (!s) return; new Function("event", s).call(this, t) } error(e) { void 0 === e && (e = "Unknown error"), console.error("[Cap] Error:", e), this.dispatchEvent("error", { isCap: !0, message: e }) } dispatchEvent(e, t) { void 0 === t && (t = {}); const s = new CustomEvent(e, { bubbles: !0, composed: !0, detail: t }); super.dispatchEvent(s) } reset() { _classPrivateFieldLooseBase(this, a)[a] && (clearTimeout(_classPrivateFieldLooseBase(this, a)[a]), _classPrivateFieldLooseBase(this, a)[a] = null), this.dispatchEvent("reset"), _classPrivateFieldLooseBase(this, r)[r] = null, this.querySelector("input[name='cap-token']") && (this.querySelector("input[name='cap-token']").value = "") } get token() { return _classPrivateFieldLooseBase(this, r)[r] } disconnectedCallback() { this.removeEventListener("progress", this.boundHandleProgress), this.removeEventListener("solve", this.boundHandleSolve), this.removeEventListener("error", this.boundHandleError), this.removeEventListener("reset", this.boundHandleReset), _classPrivateFieldLooseBase(this, d)[d].forEach(((e, t) => { this.removeEventListener(t.slice(2), e) })), _classPrivateFieldLooseBase(this, d)[d].clear(), _classPrivateFieldLooseBase(this, o)[o] && (_classPrivateFieldLooseBase(this, o)[o].innerHTML = ""), this.reset(), this.cleanup() } cleanup() { _classPrivateFieldLooseBase(this, a)[a] && (clearTimeout(_classPrivateFieldLooseBase(this, a)[a]), _classPrivateFieldLooseBase(this, a)[a] = null), _classPrivateFieldLooseBase(this, s)[s] && (URL.revokeObjectURL(_classPrivateFieldLooseBase(this, s)[s]), _classPrivateFieldLooseBase(this, s)[s] = "") } } class p { constructor(e, t) { void 0 === e && (e = {}); let s = t || document.createElement("cap-widget"); if (Object.entries(e).forEach((e => { let [t, a] = e; s.setAttribute(t, a) })), !e.apiEndpoint) throw s.remove(), new Error("Missing API endpoint"); console.log(e), s.setAttribute("data-cap-api-endpoint", e.apiEndpoint), this.widget = s, this.solve = this.widget.solve.bind(this.widget), this.reset = this.widget.reset.bind(this.widget), this.addEventListener = this.widget.addEventListener.bind(this.widget), Object.defineProperty(this, "token", { get: () => s.getToken(), configurable: !0, enumerable: !0 }), t || (s.style.display = "none", document.documentElement.appendChild(s)) } } const v = new CSSStyleSheet; v.replaceSync('html{--cap-font:system,-apple-system,"BlinkMacSystemFont",".SFNSText-Regular","San Francisco","Roboto","Segoe UI","Helvetica Neue","Lucida Grande","Ubuntu","arial",sans-serif;--cap-color:#212121;--cap-background:#fdfdfd;--cap-border-color:#dddddd8f;--cap-border-radius:14px;--cap-checkbox-border:1px solid #aaaaaad1;--cap-checkbox-border-radius:6px;--cap-checkbox-background:#fafafa91;--cap-widget-width:240px;--cap-widget-padding:14px;--cap-checkbox-size:24px;--cap-checkbox-margin:2px;--cap-transition-duration:0.2s;--cap-gap:15px;--cap-opacity-hover:0.8;--cap-hover-filter:brightness(97%);--cap-active-scale:0.98;--cap-credits-font-size:12px;--cap-spinner-color:black;--cap-spinner-background-color:#eee;--cap-error-cross:url("data:image/svg+xml,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' width=\'96\' height=\'96\' viewBox=\'0 0 24 24\'%3E%3Cpath fill=\'%23f55b50\' d=\'M11 15h2v2h-2zm0-8h2v6h-2zm1-5C6.47 2 2 6.5 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2m0 18a8 8 0 0 1-8-8a8 8 0 0 1 8-8a8 8 0 0 1 8 8a8 8 0 0 1-8 8\'/%3E%3C/svg%3E");--cap-checkmark:url("data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cstyle%3E%40keyframes%20anim%7B0%25%7Bstroke-dashoffset%3A23.21320343017578px%7Dto%7Bstroke-dashoffset%3A0%7D%7D%3C%2Fstyle%3E%3Cpath%20fill%3D%22none%22%20stroke%3D%22%2300a67d%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-width%3D%222%22%20d%3D%22m5%2012%205%205L20%207%22%20style%3D%22stroke-dashoffset%3A0%3Bstroke-dasharray%3A23.21320343017578px%3Banimation%3Aanim%20.5s%20ease%22%2F%3E%3C%2Fsvg%3E");--cap-spinner-thickness:5px;}'), document.adoptedStyleSheets.push(v); const u = function () { let e; self.onmessage = async t => { let { data: { salt: s, target: a } } = t, i = 0; const r = 5e4; let o = 0; const n = new TextEncoder; if ("object" != typeof WebAssembly || "function" != typeof WebAssembly.instantiate) { console.log("[cap] WASM not enabled, falling back to crypto.subtle\nThis is significanty slower than the WASM implementation"); const e = new Uint8Array(a.length / 2); for (let t = 0; t < e.length; t++)e[t] = parseInt(a.substring(2 * t, 2 * t + 2), 16); const t = e.length; for (; ;)try { for (let a = 0; a < r; a++) { const a = s + i, r = n.encode(a), o = await crypto.subtle.digest("SHA-256", r), c = new Uint8Array(o, 0, t); let l = !0; for (let s = 0; s < t; s++)if (c[s] !== e[s]) { l = !1; break } if (l) return void self.postMessage({ nonce: i, found: !0 }); i++ } o += r } catch (e) { return console.error("[cap] fallback worker error", e), void self.postMessage({ found: !1, error: e.message }) } } e || (e = await hashwasm.createSHA256()); const c = new Uint8Array(128); for (; ;)try { for (let t = 0; t < r; t++) { const t = s + i.toString(), r = n.encode(t); c.set(r), e.init(), e.update(c.subarray(0, r.length)); if (e.digest("hex").startsWith(a)) return void self.postMessage({ nonce: i, found: !0 }); i++ } o += r } catch (e) { return void self.postMessage({ found: !1, error: e.message }) } } }; setTimeout((async function () { e = await (await fetch("https://cdn.jsdelivr.net/npm/@cap.js/widget/wasm-hashes.min.js")).text() + u.toString().replace(/^function\s*\([^\)]*\)\s*{|\}$/g, "").trim() }), 1), window.Cap = p, customElements.get("cap-widget") ? console.warn("The cap-widget element has already been defined. Skipping re-defining it.") : customElements.define("cap-widget", h), "object" == typeof exports && "undefined" != typeof module ? module.exports = p : "function" == typeof define && define.amd && define([], (function () { return p })), "undefined" != typeof exports && (exports.default = p) }();